name: Rust CI

on:
  push:
  pull_request:
  schedule:
    # run once a week to check
    - cron:  "0 0 * * 0"

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - {command: fmt, rust: nightly}
          - {command: clippy, rust: stable}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Rust (${{matrix.rust}})
        uses: actions-rs/toolchain@v1
        with: {profile: minimal, toolchain: '${{matrix.rust}}', override: true, components: 'rustfmt, clippy'}
      - name: Install HDF5
        run: sudo apt-get install libhdf5-dev
      - name: Run cargo ${{matrix.command}}
        uses: actions-rs/cargo@v1
        with:
          command: ${{matrix.command}}
          args: "${{matrix.command == 'fmt' && '-- --check' || '-- -D warnings'}}"

  test:
    name: test
    runs-on: ${{matrix.os}}-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        include:
          - {os: ubuntu, rust: stable}
          - {os: windows, rust: stable}
          - {os: macos, rust: stable}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with: {submodules: true}
      - name: Install Rust (${{matrix.rust}})
        uses: actions-rs/toolchain@v1
        with: {toolchain: '${{matrix.rust}}', profile: minimal, override: true}
      - name: Install conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: false
          miniconda-version: "latest"
          auto-activate-base: true
          activate-environment: ""

      - name: Install HDF5
        run: |
          conda install -yq hdf5
          echo  "HDF5_DIR=$CONDA_PREFIX" >> $GITHUB_ENV
          if [ "${{runner.os}}" != "Windows" ]; then
              echo "RUSTFLAGS=-C link-args=-Wl,-rpath,$CONDA_PREFIX/lib" >> $GITHUB_ENV
          fi

      - name: Run cargo-tarpaulin (Linux)
        if: runner.os == 'Linux'
        uses: actions-rs/tarpaulin@v0.1
        with:
          version: '0.18.5'

      - name: Build  & Test (Others)
        if: runner.os != 'Linux'
        run: cargo test -v

      - name: Upload to codecov.io
        if: success() && runner.os == 'Linux'
        uses: codecov/codecov-action@v2.0.2
        with:
          token: ${{secrets.CODECOV_TOKEN}} # not required for public repos
          fail_ci_if_error: true
